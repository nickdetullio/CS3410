#Note for testing
#Each block should be tested separately in order for the registers to be zeroed
#The blocks of tests are identified by a comment at the top and ended by a line space

#Series of Table A Instructions

#initial test of some basic instructions with NO-Ops to deal with hazards
addiu $3, $1,1
sll  $0, $0, 00000
sll  $0, $0, 00000
sll  $0, $0, 00000
sll  $0, $0, 00000
ori $4, $3, 31

#a test of addiu on all 16 bits
addiu $3, $0, 1
sltiu $3, $0, 1
addiu $3, $0, 2
sltiu $3, $0, 1
addiu $3, $0, 4
sltiu $3, $0, 1
addiu $3, $0, 8
sltiu $3, $0, 1
addiu $3, $0, 16
sltiu $3, $0, 1
addiu $3, $0, 32
sltiu $3, $0, 1
addiu $3, $0, 64
sltiu $3, $0, 1
addiu $3, $0, 128
sltiu $3, $0, 1
addiu $3, $0, 256
sltiu $3, $0, 1
addiu $3, $0, 512
sltiu $3, $0, 1
addiu $3, $0, 1024
sltiu $3, $0, 1
addiu $3, $0, 2048
sltiu $3, $0, 1
addiu $3, $0, 4096
sltiu $3, $0, 1
addiu $3, $0, 8192
sltiu $3, $0, 1
addiu $3, $0, 16384

#a test of andi, ori, and xori on all 16 bits
#addiu initializes register $1 to 32767
addiu $1, $0, 32767
andi $2, $1, 1
andi $3, $1, 2
andi $2, $1, 4
andi $2, $1, 8
andi $2, $1, 16
andi $2, $1, 32
andi $2, $1, 64
andi $2, $1, 128
andi $2, $1, 256
andi $2, $1, 512
andi $2, $1, 1024
andi $2, $1, 2048
andi $2, $1, 4096
andi $2, $1, 8192
andi $2, $1, 16384
ori $2, $1, 1
ori $2, $1, 2
ori $2, $1, 4
ori $2, $1, 8
ori $2, $1, 16
ori $2, $1, 32
ori $2, $1, 64
ori $2, $1, 128
ori $2, $1, 256
ori $2, $1, 512
ori $2, $1, 1024
ori $2, $1, 2048
ori $2, $1, 4096
ori $2, $1, 8192
ori $2, $1, 16384
xori $2, $1, 1
xori $2, $1, 2
xori $2, $1, 4
xori $2, $1, 8
xori $2, $1, 16
xori $2, $1, 32
xori $2, $1, 64
xori $2, $1, 128
xori $2, $1, 256
xori $2, $1, 512
xori $2, $1, 1024
xori $2, $1, 2048
xori $2, $1, 4096
xori $2, $1, 8192
xori $2, $1, 16384


#a test of andi, ori, and xori on all 16 bits
#addiu initializes register $1 to 16834
addiu $1, $0, 16384
ori $2, $1, 1
ori $2, $1, 2
ori $2, $1, 4
ori $2, $1, 8
ori $2, $1, 16
ori $2, $1, 32
ori $2, $1, 64
ori $2, $1, 128
ori $2, $1, 256
ori $2, $1, 512
ori $2, $1, 1024
ori $2, $1, 2048
ori $2, $1, 4096
ori $2, $1, 8192
ori $2, $1, 16384
xori $2, $1, 1
xori $2, $1, 2
xori $2, $1, 4
xori $2, $1, 8
xori $2, $1, 16
xori $2, $1, 32
xori $2, $1, 64
xori $2, $1, 128
xori $2, $1, 256
xori $2, $1, 512
xori $2, $1, 1024
xori $2, $1, 2048
xori $2, $1, 4096
xori $2, $1, 8192
xori $2, $1, 16384

#a test of slti with 65535 compared to 0 and negative -1
ori $1, $0, 65535
slti $1, $1, 0
slti $1, $0, -1

#a test of slti with each successive bit compared to 0
addiu $1, $0, 1
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 2
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 4
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 8
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 16
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 32
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 64
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 128
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 256
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 512
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 1024
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 2048
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 4096
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 8192
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 16384
addu $2, $1, $0
slti $1, $1, 0
addiu $1, $0, 32767
addu $2, $1, $0
slti $1, $1, 0

#a test of addu with two random values initialized with addiu
addiu $1, $0, 4
addiu $2, $0, 203
addu $3, $1, $2

#a test of each bit from 0 to 16 subtracted from 32767
#slti used to check if $3 is greater than 0 and the subtraction was successful
addiu $1, $0, 32767
addiu $2, $0, 1
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 2
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 4
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 8
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 16
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 32
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 64
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 128
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 256
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 512
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 1024
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 2048
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 4096
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 8192
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 16384
subu $3, $1, $2
slti $2, $2, 0
addiu $2, $0, 32767
subu $3, $1, $2
slti $2, $2, 0

#a test of and with each possible bit
addiu $2, $0, 1
and $3, $1, $2
addiu $2, $0, 2
and $3, $1, $2
addiu $2, $0, 4
and $3, $1, $2
addiu $2, $0, 8
and $3, $1, $2
addiu $2, $0, 16
and $3, $1, $2
addiu $2, $0, 32
and $3, $1, $2
addiu $2, $0, 64
and $3, $1, $2
addiu $2, $0, 128
and $3, $1, $2
addiu $2, $0, 256
and $3, $1, $2
addiu $2, $0, 512
and $3, $1, $2
addiu $2, $0, 1024
and $3, $1, $2
addiu $2, $0, 2048
and $3, $1, $2
addiu $2, $0, 4096
and $3, $1, $2
addiu $2, $0, 8192
and $3, $1, $2
addiu $2, $0, 16384
and $3, $1, $2
addiu $2, $0, 32767
and $3, $1, $2

#a test of or with each possible bit
addiu $2, $0, 1
or $3, $0, $2
addiu $2, $0, 2
or $3, $0, $2
addiu $2, $0, 4
or $3, $0, $2
addiu $2, $0, 8
or $3, $0, $2
addiu $2, $0, 16
or $3, $0, $2
addiu $2, $0, 32
or $3, $0, $2
addiu $2, $0, 64
or $3, $0, $2
addiu $2, $0, 128
or $3, $0, $2
addiu $2, $0, 256
or $3, $0, $2
addiu $2, $0, 512
or $3, $0, $2
addiu $2, $0, 1024
or $3, $0, $2
addiu $2, $0, 2048
or $3, $0, $2
addiu $2, $0, 4096
or $3, $0, $2
addiu $2, $0, 8192
or $3, $0, $2
addiu $2, $0, 16384
or $3, $0, $2
addiu $2, $0, 32767
or $3, $0, $2
addiu $1, $0, 32767
or $3, $1, $2

#a test of xor with each possible bit
addiu $2, $0, 1
xor $3, $0, $2
addiu $2, $0, 2
xor $3, $0, $2
addiu $2, $0, 4
xor $3, $0, $2
addiu $2, $0, 8
xor $3, $0, $2
addiu $2, $0, 16
xor $3, $0, $2
addiu $2, $0, 32
xor $3, $0, $2
addiu $2, $0, 64
xor $3, $0, $2
addiu $2, $0, 128
xor $3, $0, $2
addiu $2, $0, 256
xor $3, $0, $2
addiu $2, $0, 512
xor $3, $0, $2
addiu $2, $0, 1024
xor $3, $0, $2
addiu $2, $0, 2048
xor $3, $0, $2
addiu $2, $0, 4096
xor $3, $0, $2
addiu $2, $0, 8192
xor $3, $0, $2
addiu $2, $0, 16384
xor $3, $0, $2
addiu $1, $0, 32767
addiu $2, $0, 32767
xor $3, $1, $2

#a test of nor with each possible bit
addiu $2, $0, 1
nor $3, $0, $2
addiu $2, $0, 2
nor $3, $0, $2
addiu $2, $0, 4
nor $3, $0, $2
addiu $2, $0, 8
nor $3, $0, $2
addiu $2, $0, 16
nor $3, $0, $2
addiu $2, $0, 32
nor $3, $0, $2
addiu $2, $0, 64
nor $3, $0, $2
addiu $2, $0, 128
nor $3, $0, $2
addiu $2, $0, 256
nor $3, $0, $2
addiu $2, $0, 512
nor $3, $0, $2
addiu $2, $0, 1024
nor $3, $0, $2
addiu $2, $0, 2048
nor $3, $0, $2
addiu $2, $0, 4096
nor $3, $0, $2
addiu $2, $0, 8192
nor $3, $0, $2
addiu $2, $0, 16384
nor $3, $0, $2
addiu $1, $0, 32767
addiu $2, $0, 32767
nor $3, $1, $2

#a test of slt with both a positive, zero, and negative value
addiu $1, $0, 1
slt $2, $1, $0
slt $2, $0, $1
nor $1, $0, $0
slt $2, $1, $0
slt $2, $0, $1

#a test of sltu with both a positive, zero, and negative value
addiu $1, $0, 1
sltu $2, $1, $0
sltu $2, $0, $1
nor $1, $0, $0
sltu $2, $1, $0
sltu $2, $0, $1

#a test of move with both a zero, positive, and negative value
addiu $1, $0, 2
addiu $2, $0, 4
movn $1, $2, $0
movn $1, $2, $1
nor $1, $0, $0
movn $1, $2, $1

#a test of move with both a zero, positive, and negative value
addiu $1, $0, 2
addiu $2, $0, 4
movz $1, $2, $0
addiu $2, $0, 2
movz $1, $2, $1
nor $1, $0, $0
movz $1, $2, $1

#a test of sll with each possible Sa value
#first set $1 to 1 and shift it by each Sa
addiu $1, $0, 1
sll $2, $1, 1
sll $2, $1, 2
sll $2, $1, 4
sll $2, $1, 8
sll $2, $1, 16
sll $2, $1, 31
#then set $1 to all 1s and shift it by each Sa
nor $1, $0, $0
sll $2, $1, 1
sll $2, $1, 2
sll $2, $1, 4
sll $2, $1, 8
sll $2, $1, 16
sll $2, $1, 31

#a test of srl with each possible Sa value
#first set $1 to 1 and shift it by each Sa
addiu $1, $0, 1
srl $2, $1, 1
srl $2, $1, 2
srl $2, $1, 4
srl $2, $1, 8
srl $2, $1, 16
srl $2, $1, 31
#then set $1 to all 1s and shift it by each Sa
nor $1, $0, $0
srl $2, $1, 1
srl $2, $1, 2
srl $2, $1, 4
srl $2, $1, 8
srl $2, $1, 16
srl $2, $1, 31

#a test of sra with each possible Sa value
#first set $1 to 1 and shift it by each Sa
addiu $1, $0, 1
sra $2, $1, 1
sra $2, $1, 2
sra $2, $1, 4
sra $2, $1, 8
sra $2, $1, 16
sra $2, $1, 31
nor $1, $0, $0
sra $2, $1, 1
sra $2, $1, 2
sra $2, $1, 4
sra $2, $1, 8
sra $2, $1, 16
sra $2, $1, 31

#a test of sllv with each possible Sa value
#first set $1 to 1 and shift it by each Sa
addiu $1, $0, 1
addiu $2, $0, 1
sllv $3, $1, $2
addiu $2, $0, 2
sllv $3, $1, $2
addiu $2, $0, 4
sllv $3, $1, $2
addiu $2, $0, 8
sllv $3, $1, $2
addiu $2, $0, 16
sllv $3, $1, $2
addiu $2, $0, 31
sllv $3, $1, $2
#then set $1 to all 1s and shift it by each Sa
nor $1, $0, $0
addiu $2, $0, 1
sllv $3, $1, $2
addiu $2, $0, 2
sllv $3, $1, $2
addiu $2, $0, 4
sllv $3, $1, $2
addiu $2, $0, 8
sllv $3, $1, $2
addiu $2, $0, 16
sllv $3, $1, $2
addiu $2, $0, 31
sllv $3, $1, $2

#a test of srlv with each possible Sa value
addiu $1, $0, 1
addiu $2, $0, 1
srlv $3, $1, $2
nor $1, $0, $0
addiu $2, $0, 1
srlv $3, $1, $2
addiu $2, $0, 2
srlv $3, $1, $2
addiu $2, $0, 4
srlv $3, $1, $2
addiu $2, $0, 8
srlv $3, $1, $2
addiu $2, $0, 16
srlv $3, $1, $2
addiu $2, $0, 31
srlv $3, $1, $2

#a test of srav with each possible Sa value
addiu $1, $0, 1
addiu $2, $0, 1
srav $3, $1, $2
nor $1, $0, $0
srav $3, $1, $2
addiu $2, $0, 2
srav $3, $1, $2
addiu $2, $0, 4
srav $3, $1, $2
addiu $2, $0, 8
srav $3, $1, $2
addiu $2, $0, 16
srav $3, $1, $2
addiu $2, $0, 31
srav $3, $1, $2

#a test of load upper-immediate on all 16-bits
lui $1, 1
lui $1, 2
lui $1, 4
lui $1, 8
lui $1, 16
lui $1, 32
lui $1, 64
lui $1, 128
lui $1, 256
lui $1, 512
lui $1, 1024
lui $1, 2048
lui $1, 4096
lui $1, 8192
lui $1, 16384
lui $1, 32768

#Series of tests for Table B Instructions

#a test that jump type instructions are passed through
j 16
jal  32
addiu $2, $0, 4
jalr $1, $2
jr $2

#a test that beq and bne are passed through and not written
addiu $1, $0, 4
beq $0, $0, 16
beq $0, $1, 16
bne $0, $0, 16
bne $0, $1, 16

#a test that bltz, bgtz, bgez, and blez are passed through and not written
addiu $1, $0, 4
nor $2, $0, $0
blez $0, 8
blez $1, 16
blez $2, 32
bgtz $0, 8
bgtz $1, 16
bgtz $2, 32
bltz $0, 8
bltz $1, 16
bltz $2, 32
bgez $0, 8
bgez $1, 16
bgez $2, 32

#a test that all load instructions are passed through and not written
lw $1, 16($0)
lb $1, 16($0)
lbu $1, 16($0)
addiu $2, $0, 4
sw $2, 2($0)
sb $2, 2($0)

#a test of forwarding in the case of data hazards
addiu $1, $0, 4
lui $3, 1
lui $4, 2
sll $4, $4, 2 #ex to ex forwarding
addu $4, $4, $3 #mem to ex forwarding ($4) and register file bypass ($3)

#a test of forwarding in the case of data hazards
addiu $1, $0, 4
addiu $2, $0, 1
addu $3, $2, $0 
subu $3, $3, $2
lui $3, 1
or $3, $2, $1

#Series of Table B Instructions
addiu $1, $0, 1
sw $1, 0($0)
lw $2, 0($0)

addiu $1, $0, 128
sb $1, 1($0)
lb $2, 1($0)
lbu $2, 1($0)

ADDIU $1, $0, 0
LP1: SLT $1, $1, $0
J LP1

ADDIU $1, $0, 0
LP1: SLT $1, $1, $0
JAL LP1

ADDIU $1, $0, 32
sll $0, $0, 0
sll $0, $0, 0
sll $0, $0, 0
sll $0, $0, 0
JALR $2, $1