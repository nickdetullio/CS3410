int m_hailstone(int n, int A[], int s) {
        if (n < s && A[n] != 0) return A[n]; /* computed this one before */
        if (n == 1) return 0;
        else {
            int i;
            if ((n % 2) == 0) i = 1 + m_hailstone(n/2, A, s);
            else i = 1 + m_hailstone(3*n+1, A, s);
            if (n < s) A[n] = i; /* save this answer for reuse later */
            return i;
        }
    }

ADDIU $t0, $0, 0			#set temp register $t0 to 0 for conditionals
ADDIU $t1, $0, 1			#set temp register $t1 to 1 for conditionals

HAIL: ADDIU $t2, $a0, 0			#set temp register $t2 to argument n
      SLL $t6, $t2, 2			#set temp register $t6 to array index n
      LW $t3, $t6($a1)			#set temp register $t3 to A[n] 
      ADDIU $t4, $a2, 0			#set temp register $t4 to s
      SUB $t5, $t2, $t4			#store result of n - s in temp register $t5

      SLT $t7, $0, $t3			#a check if A[n] != 0
      SLTI $t8, $t5, 0			#a check if n < s
      AND $t8, $t7, $t8			#conditional (A[n] != 0) && n < s

      BEQ $t8, $t1, EXIT		#branch to EXIT if n < s && (A[n] != 0)
      SLL $0, $0, 0			#delay slot for BEQ
	    
      BEQ $t2, $t1, EXIT2		#branch to EXIT2 if n == 1
      SLL $0, $0, 0			#delay slot for BEQ
      
      ADDIU $t7, $0, 0			#initialize i in temp register $t7 to 0
      ANDI $t6, $t2, 1			#ANDI of n and 1 for modulo arithmetic stored in $t6
      BEQ $t6, $t0, EXIT3		#branch to EXIT3 if (n % 2) == 0
      SLL $0, $0, 0			#delay slot for BEQ

      ADDU $a0, $t2, $t2		#argument n set to 3n + 1
      ADDU $a0, $a0, $t2
      ADDIU $a0, $a0, 1

      REC: JAL HAIL			#recursive call
           SLL $0, $0, 0		#delay slot for J
           ADDIU $t7, $v0, 1		#value i = 1 + m_hailstone

           BLTZ $t5, EXIT4		#branch to EXIT4 if n < s ($t5 < 0)
           SLL $0, $0, 0		#delay slot for BLTZ
           
           TERMI: ADDIU $v0, $t7, 0 	#return value $v0 set to i
	   TERM: JR $31			#JR 31 to return i
                 SLL $0, $0, 0		#delay slot for JR

      EXIT: ADDIU $v0, $t3, 0		#set return value $v0 to A[n]
            J TERM			#jump to TERM
            SLL $0, $0, 0		#delay slot for j

      EXIT2: ADDIU $v0, $0, 0		#set return value $v0 to 0
             J TERM			#jump to TERM
             SLL $0, $0, 0		#delay slot for j

      EXIT3: SRA $a0, $t2, 1		#argument n set to n/2
             J REC			#jump to recursive call
             SLL $0, $0, 0		#delay slot for J

      EXIT4: SW $t7, $t6($a1)		#store i in A[n] (A[n] = i)
             J TERMI			#jump to TERM
             SLL $0, $0, 0		#delay slot for J
